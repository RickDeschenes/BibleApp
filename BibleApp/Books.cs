
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Text;

namespace AnotherBibleApp
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Runtime Version:4.0.30319.42000
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------

    // Type created for JSON at <<root>>
    [System.Runtime.Serialization.DataContractAttribute()]
    internal partial class BibleBooks
    {
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Books[] books;

        internal List<string> lBooks;
        internal List<string> lChapters;
        internal List<string> lVerses;

        internal void LoadBibleBooks(string search)
        {
            lBooks = LoadBooks();
            lChapters = LoadChapters(search);
            lVerses = LoadVerses(search + " 1");
        }

        private List<string> LoadBooks()
        {
            List<string> bks = new List<string>();

            foreach (Books bk in books)
            {
                bks.Add(bk.passage);
            }
            return bks;
        }

        private List<string> LoadChapters(string search)
        {
            List<string> bks = new List<string>();

            foreach (Books bk in books)
            {
                if (bk.passage == search)
                {
                    foreach (Chapters cr in bk.chapters)
                    {
                        bks.Add(cr.Chapter);
                    }
                }               
            }
            return bks;
        }

        private List<string> LoadVerses(string search)
        {
            List<string> bks = new List<string>();

            foreach (Books bk in books)
            {
                if (bk.passage == search)
                {
                    foreach (Chapters cr in bk.chapters)
                    {
                        if (cr.Chapter == search)
                        {
                            bks.Add(cr.Chapter);
                        }
                    }
                }
            }
            return bks;
        }

        public static BibleBooks Deserialize<BibleBooks>(string json)
        {
            using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)))
            {
                DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(BibleBooks));
                return (BibleBooks)serializer.ReadObject(ms);
            }
        }

        public static string Serialize<BibleBooks>(BibleBooks obj)
        {
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType());
            using (MemoryStream ms = new MemoryStream())
            {
                serializer.WriteObject(ms, obj);
                return Encoding.Default.GetString(ms.ToArray());
            }
        }

        internal string LoadPasage(string version, string bible, string chapter, string start, string stop)
        {
            throw new NotImplementedException();
        }
    }

    // Type created for JSON at <<root>> --> books
    [System.Runtime.Serialization.DataContractAttribute(Name = "books")]
    internal partial class Books: IEnumerable<Chapters>
    {
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string passage;

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Chapters[] chapters;

        public IEnumerator<Chapters> GetEnumerator()
        {
            throw new NotImplementedException();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            throw new NotImplementedException();
        }
    }

    // Type created for JSON at <<root>> --> chapters
    [System.Runtime.Serialization.DataContractAttribute(Name = "chapters")]
    internal partial class Chapters
    {
        [System.Runtime.Serialization.DataMemberAttribute(Name = "passage")]
        internal string Chapter;
        internal Chapters(string verse)
        {
            Chapter = verse;
        }
    }
}
